{"version":3,"sources":["Components/Number/Number.js","Components/Game/Game.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Number","handleClickNum","_this","props","clickable","onClick","id","react_default","a","createElement","className","style","opacity","this","value","React","PureComponent","randomNumber","min","max","Math","floor","random","colors","new","playing","won","lost","Game","state","gameStatus","remainingSeconds","initialSeconds","selectedIds","challengeNumbers","Array","from","length","challengeSize","map","apply","Object","toConsumableArray","challengeRange","target","_","sum","sampleSize","answerSize","isNumberAvailable","numberIndex","indexOf","startGame","setState","intervalId","setInterval","prevState","newRemainingSeconds","clearInterval","selectNumber","concat","calcGameStatus","sumSelected","reduce","acc","curr","autoPlay","_this2","_this$state","backgroundColor","index","Components_Number_Number","key","includes","onPlayAgain","Component","bgColors","App","gameId","resetGame","Components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f56f79b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Number extends React.PureComponent {\r\n\r\n  handleClickNum = () => {\r\n    return this.props.clickable ? this.props.onClick(this.props.id) : null \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"number\"\r\n           style={{ opacity: this.props.clickable ? 1 : 0.3 }}\r\n           onClick={this.handleClickNum}\r\n      >\r\n        {this.props.value}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Number","import React, { Component } from 'react';\r\nimport '../Game/Game.css';\r\nimport Number from '../Number/Number'\r\nimport _ from 'lodash'\r\n\r\nconst randomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\nconst colors = {\r\n  new: '#008B8B',\r\n  playing: '#6495ED',\r\n  won: '#3CB371',\r\n  lost: '#F08080'\r\n}\r\n\r\nclass Game extends Component {\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId)\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.autoPlay) {\r\n      this.startGame();\r\n    }\r\n  }\r\n\r\n  state = {\r\n    gameStatus: 'new',\r\n    remainingSeconds: this.props.initialSeconds,\r\n    selectedIds: []\r\n  }\r\n\r\n  static bgColors = {\r\n    playing: '#ccc',\r\n    won: '#3CB371',\r\n    lost: '#F08080'\r\n  }\r\n\r\n  challengeNumbers = Array.from({ length: this.props.challengeSize })\r\n    .map(() => randomNumber(...this.props.challengeRange))\r\n\r\n  target = _.sum(\r\n    _.sampleSize(this.challengeNumbers, this.props.answerSize)\r\n  );\r\n\r\n  isNumberAvailable = numberIndex => this.state.selectedIds.indexOf(numberIndex) === -1;\r\n\r\n  startGame = () => {\r\n    this.setState({\r\n      gameStatus: 'playing'\r\n    }, () => {\r\n      this.intervalId = setInterval(() => {\r\n        this.setState((prevState) => {\r\n          const newRemainingSeconds = prevState.remainingSeconds - 1;\r\n          if (newRemainingSeconds === 0) {\r\n            clearInterval(this.intervalId);\r\n            return { gameStatus: 'lost', remainingSeconds: 0 };\r\n          };\r\n          return { remainingSeconds: newRemainingSeconds};\r\n        });\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  selectNumber = numberIndex => {\r\n    if (this.state.gameStatus !== 'playing') {\r\n      return;\r\n    }\r\n    this.setState((prevState) => ({\r\n      selectedIds: [...prevState.selectedIds, numberIndex],\r\n      gameStatus: this.calcGameStatus(\r\n        [...prevState.selectedIds,numberIndex]\r\n      ),\r\n    }),\r\n    () => {\r\n      if (this.state.gameStatus !== 'playing') {\r\n        clearInterval(this.intervalId);\r\n      }\r\n    });\r\n  };\r\n\r\n  calcGameStatus = selectedIds => {\r\n    const sumSelected = selectedIds.reduce((acc, curr) => acc + this.challengeNumbers[curr], 0);\r\n    if (sumSelected < this.target) {\r\n      return 'playing';\r\n    }\r\n    return sumSelected === this.target ? 'won' : 'lost';\r\n  };\r\n\r\n  render() {\r\n    const { gameStatus, remainingSeconds } = this.state;\r\n    return(\r\n      <div>\r\n        <div className=\"game\">\r\n        <p>Numbers are: {this.props.challengeSize}</p>\r\n          <div className=\"help\">\r\n            Pick {this.props.answerSize} numbers that sum to the target in {this.props.initialSeconds} seconds\r\n          </div>\r\n          <div className=\"target\"\r\n               style={{ backgroundColor: colors[this.state.gameStatus] }}\r\n          >\r\n          { this.state.gameStatus === 'new' ? '?' : this.target }\r\n          </div>\r\n          <div className=\"challenge-numbers\">\r\n            {\r\n              this.challengeNumbers.map((value, index) => \r\n                <Number key={index}\r\n                        id={index}\r\n                        value={this.state.gameStatus === 'new' ? '?' : value}\r\n                        clickable={this.isNumberAvailable(index)}\r\n                        onClick={this.selectNumber}\r\n                />\r\n              )\r\n            }\r\n          </div>\r\n          <div className=\"footer\">\r\n          {\r\n            this.state.gameStatus === 'new' && \r\n            (\r\n              <button onClick={this.startGame}>Start</button>\r\n            )\r\n          }\r\n          {\r\n            this.state.gameStatus === 'playing' && (\r\n              <div className=\"timer-value\">{remainingSeconds}</div>\r\n            )            \r\n          }\r\n          {\r\n            ['won', 'lost'].includes(this.state.gameStatus) && (\r\n              <button onClick={this.props.onPlayAgain}>\r\n                Play Again\r\n              </button>\r\n            )\r\n          }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Game from '../Game/Game'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    gameId: 1\r\n  };\r\n\r\n  resetGame = () => {\r\n    this.setState((prevState) => ({\r\n      gameId: prevState.gameId + 1\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Game\r\n          key={this.state.gameId}\r\n          autoPlay={this.state.gameId > 1} \r\n          challengeSize={6}\r\n          challengeRange={[2, 9]}\r\n          answerSize={4}\r\n          initialSeconds={15}\r\n          onPlayAgain={this.resetGame}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './../src/Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}